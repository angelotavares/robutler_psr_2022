#base_global_planner: navfn/NavfnROS
base_global_planner: global_planner/GlobalPlanner
#base_global_planner: carrot_planner/CarrotPlanner

base_local_planner: dwa_local_planner/DWAPlannerROS
#base_local_planner: base_local_planner/TrajectoryPlannerROS
#base_local_planner: teb_local_planner/TebLocalPlannerROS

recovery_behavior_enabled: false



shutdown_costmaps: false

controller_frequency: 5.0
controller_patience: 3.0


planner_frequency: 3.0
planner_patience: 5.0

oscillation_timeout: 20.0
oscillation_distance: 0.7




DWAPlannerROS:

# Robot Configuration Parameters - Kobuki
  max_vel_x: 0.55  # 0.55
  min_vel_x: -0.55 

  max_vel_y: 0.55  # diff drive robot
  min_vel_y: -0.55  # diff drive robot

  max_vel_trans: 0.50 # choose slightly less than the base's capability
  min_vel_trans: -0.50  # this is the min trans velocity when there is negligible rotational velocity
  trans_stopped_vel: 0.1

  # Warning!
  #   do not set min_trans_vel to 0.0 otherwise dwa will always think translational velocities
  #   are non-negligible and small in place rotational velocities will be created.

  max_vel_theta: 0.50  # choose slightly less than the base's capability
  min_vel_theta: -0.50  # this is the min angular velocity when there is negligible translational velocity
  theta_stopped_vel: 1
  
  acc_lim_x: 1.0 # maximum is theoretically 2.0, but we 
  acc_lim_theta: 1.0
  acc_lim_y: 1.0      # diff drive robot

# Goal Tolerance Parameters
  yaw_goal_tolerance: 0.05  # 0.05
  xy_goal_tolerance: 0.10  # 0.10
  latch_xy_goal_tolerance: false

# Forward Simulation Parameters
  sim_time: 1.5       # 1.7
  sim_granularity: 0.02
  angular_sim_granularity: 0.02
  vx_samples: 25       # 3
  vy_samples: 25       # diff drive robot, there is only one sample
  vtheta_samples: 25  # 20

# Trajectory Scoring Parameters 
  path_distance_bias: 0.8      # 64.0   - weighting for how much it should stick to the global path plan
  goal_distance_bias: 0.6      # 24.0   - wighting for how much it should attempt to reach its goal
  occdist_scale: 0.01            # 0.01   - weighting for how much the controller should avoid obstacles
  forward_point_distance: 0.325 # 0.325  - how far along to place an additional scoring point
  stop_time_buffer: 0.2         # 0.2    - amount of time a robot must stop in before colliding for a valid traj.
  scaling_speed: 0.25           # 0.25   - absolute velocity at which to start scaling the robot's footprint
  max_scaling_factor: 0.2       # 0.2    - how much to scale the robot's footprint when at speed.

# Oscillation Prevention Parameters
  oscillation_reset_dist: 0.05  # 0.05   - how far to travel before resetting oscillation flags

# Debugging
  publish_traj_pc : true
  publish_cost_grid_pc: true
  global_frame_id: map


# Differential-drive robot configuration - necessary?
  holonomic_robot: false


GlobalPlanner:                                  # Also see: http://wiki.ros.org/global_planner
  old_navfn_behavior: false                     # Exactly mirror behavior of navfn, use defaults for other boolean parameters, default false
  use_quadratic: true                           # Use the quadratic approximation of the potential. Otherwise, use a simpler calculation, default true
  use_dijkstra: true                            # Use dijkstra's algorithm. Otherwise, A*, default true
  use_grid_path: false                          # Create a path that follows the grid boundaries. Otherwise, use a gradient descent method, default false
  
  allow_unknown: true                           # Allow planner to plan through unknown space, default true
                                                #Needs to have track_unknown_space: true in the obstacle / voxel layer (in costmap_commons_param) to work
  planner_window_x: 0.0                         # default 0.0
  planner_window_y: 0.0                         # default 0.0
  default_tolerance: 0.0                        # If goal in obstacle, plan to the closest point in radius default_tolerance, default 0.0
  
  publish_scale: 100                            # Scale by which the published potential gets multiplied, default 100
  planner_costmap_publish_frequency: 0.0        # default 0.0
  
  lethal_cost: 253                              # default 253
  neutral_cost: 50                              # default 50
  cost_factor: 3.0                              # Factor to multiply each cost from costmap by, default 3.0
  publish_potential: true                       # Publish Potential Costmap (this is not like the navfn pointcloud2 potential), default true