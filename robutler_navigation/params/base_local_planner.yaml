#base_global_planner: navfn/NavfnROS
base_global_planner: global_planner/GlobalPlanner
#base_global_planner: carrot_planner/CarrotPlanner

base_local_planner: dwa_local_planner/DWAPlannerROS
#base_local_planner: base_local_planner/TrajectoryPlannerROS
#base_local_planner: teb_local_planner/TebLocalPlannerROS

recovery_behavior_enabled: true

shutdown_costmaps: false

controller_frequency: 20.0                       # The frequency at which this controller will be called in Hz
controller_patience: 3.0


planner_frequency: 0.0#1.0
planner_patience: 5.0

oscillation_timeout: 60.0
oscillation_distance: 0.7


DWAPlannerROS:

# Robot Configuration Parameters - Kobuki
  max_vel_x: 0.55                               # The maximum forward velocity allowed for the base in meters/sec
  min_vel_x: 0.1                                # The minimum forward velocity allowed for the base in meters/sec

  max_vel_trans: 0.50                           # choose slightly less than the base's capability
  min_vel_trans: -0.50                          # this is the min trans velocity when there is negligible rotational velocity
  trans_stopped_vel: 0.1

  # Warning!
  #   do not set min_trans_vel to 0.0 otherwise dwa will always think translational velocities
  #   are non-negligible and small in place rotational velocities will be created.

  max_vel_theta: 0.50                           # The maximum rotational velocity allowed for the base in radians/sec 
  min_vel_theta: -0.50                          # The minimum rotational velocity allowed for the base in radians/sec 
  min_in_place_vel_theta: 0.4                   # The minimum rotational velocity allowed for the base while performing in-place rotations in radians/sec 
  theta_stopped_vel: 1
  
  acc_lim_x: 1.0                                # The x acceleration limit of the robot in meters/sec^2 
  acc_lim_theta: 1.0                            # The rotational acceleration limit of the robot in radians/sec^2 
  acc_lim_y: 1.0                                # The y acceleration limit of the robot in meters/sec^2 

  escape_vel: -0.2                              # Speed used for backing up during escapes in meters/sec.

# Differential-drive robot configuration - necessary?
  holonomic_robot: true                         # Determines whether velocity commands are generated for a holonomic or non-holonomic robot

# The following parameters are only used if holonomic_robot is set to true:
  y_vels: [-0.3, -0.1, 0.1, 0.3]                # The strafing velocities that a holonomic robot will consider in meters/sec 

# Goal Tolerance Parameters
  yaw_goal_tolerance: 1 #0.05                      # The tolerance in radians for the controller in yaw/rotation when achieving its goal 
  xy_goal_tolerance: 1 # 0.10                       # The tolerance in meters for the controller in the x & y distance when achieving a goal 
  latch_xy_goal_tolerance: false                # If goal tolerance is latched, if the robot ever reaches the goal xy location it will simply rotate in place

# Forward Simulation Parameters
  sim_time: 1.7                                 # The amount of time to forward-simulate trajectories in seconds 
  sim_granularity: 0.02                         # The step size, in meters, to take between points on a given trajectory
  angular_sim_granularity: 0.02                 # The step size, in radians, to take between angular samples on a given trajectory
  vx_samples: 3                                 # The number of samples to use when exploring the x velocity space 
  vy_samples: 3                                 # diff drive robot, there is only one sample
  vtheta_samples: 20                            # The number of samples to use when exploring the theta velocity space 

# Trajectory Scoring Parameters 
  meter_scoring: false
  pdist_scale: 1.0                              # The weighting for how much the controller should stay close to the path it was given, maximal possible value is 5.0 
  gdist_scale: 1.0                              # The weighting for how much the controller should attempt to reach its local goal, also controls speed, maximal possible value is 5.0 
  occdist_scale: 0.01                           # 0.01   - weighting for how much the controller should avoid obstacles
  heading_scoring : false                       # Whether to score based on the robot's heading to the path or its distance from the path 
  heading_lookahead: 0.325                      # How far to look ahead in meters when scoring different in-place-rotation trajectories 
  heading_scoring_timestep : 0.8                # How far to look ahead in time in seconds along the simulated trajectory when using heading scoring 
  dwa : true                                    # Whether to use the Dynamic Window Approach (DWA)_ or whether to use Trajectory Rollout 
  #stop_time_buffer: 0.1                         # 0.2    - amount of time a robot must stop in before colliding for a valid traj.
  #scaling_speed: 0.25                           # 0.25   - absolute velocity at which to start scaling the robot's footprint
  #max_scaling_factor: 0.1                       # 0.2    - how much to scale the robot's footprint when at speed.

# Oscillation Prevention Parameters
  oscillation_reset_dist: 0.05                  # 0.05   - how far to travel before resetting oscillation flags

# Global Plan Parameters  
  prune__plan: true                             # Defines whether or not to eat up the plan as the robot moves along the path.


# Debugging
  publish_traj_pc : true
  publish_cost_grid_pc: true
  global_frame_id: map




GlobalPlanner:                                  # Also see: http://wiki.ros.org/global_planner
  old_navfn_behavior: false                     # Exactly mirror behavior of navfn, use defaults for other boolean parameters, default false
  use_quadratic: true                           # Use the quadratic approximation of the potential. Otherwise, use a simpler calculation, default true
  use_dijkstra: true                            # Use dijkstra's algorithm. Otherwise, A*, default true
  use_grid_path: false                          # Create a path that follows the grid boundaries. Otherwise, use a gradient descent method, default false
  
  allow_unknown: true                           # Allow planner to plan through unknown space, default true
                                                #Needs to have track_unknown_space: true in the obstacle / voxel layer (in costmap_commons_param) to work
  planner_window_x: 0.0                         # default 0.0
  planner_window_y: 0.0                         # default 0.0
  default_tolerance: 0.2                        # If goal in obstacle, plan to the closest point in radius default_tolerance, default 0.0
  
  publish_scale: 100                            # Scale by which the published potential gets multiplied, default 100
  planner_costmap_publish_frequency: 0.0        # default 0.0
  
  lethal_cost: 253                              # default 253
  neutral_cost: 50                              # default 50
  cost_factor: 3.0                              # Factor to multiply each cost from costmap by, default 3.0
  publish_potential: true                       # Publish Potential Costmap (this is not like the navfn pointcloud2 potential), default true
